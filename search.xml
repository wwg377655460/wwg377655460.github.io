<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[Flask学习与Python进阶-2-With语句详解]]></title>
    <url>%2F2018%2F04%2F02%2FFlask%E5%AD%A6%E4%B9%A0%E4%B8%8EPython%E8%BF%9B%E9%98%B6-2-With%E8%AF%AD%E5%8F%A5%E8%AF%A6%E8%A7%A3%2F</url>
    <content type="text"><![CDATA[Python中With的用法 在编写Python代码，需要链接数据库或打开文件时，我经常会使用with with open(…): pass 它会帮助我们安全的关闭链接，但我不知道它的工作原理，下面让我们来仔细分析一下。我们先展示一段代码： class MyResource: def __enter__(self): print(&#39;connect to resource&#39;) return self def __exit__(self, exc_type, exc_val, exc_tb): if exc_tb: print(&#39;process exception&#39;) else: print(&#39;no exception&#39;) print(&#39;close resource connection&#39;) return True def query(self): print(&#39;query data&#39;) with MyResource() as resource: resource.query() 上面代码执行的结果如下： connect to resource query data no exception close resource connection 由执行的结果我们知道with语句的执行顺序 会首先调用类的enter方法，并将 enter返回的值赋给 as后的对象 执行with语句中的代码 执行 exit中的代码，这里相当于finally的作用 我们发现 exit函数有3个参数，我们来分析一下这几个参数的作用，我们修改部分代码如下： with MyResource() as resource: 1 / 0 resource.query() 执行得到下面的结果： connect to resource process exception close resource connection 显然这三个参数保存的是异常信息，我们可以在 exit中处理with中的异常信息。值得注意的是 exit的返回值，返回False，会继续在with外部抛出异常，返回True，不会继续在with外部抛出异常，什么都不返回相当于返回False。]]></content>
  </entry>
  <entry>
    <title><![CDATA[Flask学习与Python进阶\_1]]></title>
    <url>%2F2018%2F03%2F30%2FFlask%E5%AD%A6%E4%B9%A0%E4%B8%8EPython%E8%BF%9B%E9%98%B6_1%2F</url>
    <content type="text"><![CDATA[Flask是基于Python的Web框架，我们主要通过学习Flask的基础知识来学习Python进阶知识。 使用pipenv 使用pipenv创建虚拟环境 ` pip install pipenv ` 在自己的项目目录下创建虚拟环境，这个虚拟环境和项目是绑定的 `pipenv install `我执行上面的命令时报错了，好像是字符编码的问题，查询了一下，执行下面的2个命令就可以解决。 `export LANG=en_US.UTF-8 export LC_ALL=en_US.UTF-8 ` 创建完虚拟环境后，我们需要的是启动虚拟环境 ` pipenv shell ` 这里虚拟环境的主要作用是区分开项目的环境，每个项目版本、使用的包可能都不一样，区分开来更加方便。安装flask `pipenv install flask `&gt; 退出虚拟环境 `exit `&gt; 查看包的依赖关系 ` pipenv graph `&gt; 在虚拟环境下执行下面的命令，可以找到当前虚拟环境的目录 `pipenv --venv `&gt; 创建一个简单的Flask项目，下面是最简单的Flask代码，就是下面简单的代码，我们就能运行起我们的Web服务。 ` from flask import Flask app = Flask(__name__) # 实例化Flask对象 @app.route(&#39;/hello&#39;) # 定义一个视图函数 def hello(): return &quot;Hello, wsd&quot; app.run() # 启动web服务器 ` 可以调试模式，修改代码就可以自动重启服务器，同时可以显示详细的异常信息 `app.run(debug=True) &gt; 在介绍另一种路由注册方式，比较而言第一种更加方便。 ``` def hello(): 基于类的视图（即插视图）=> 不是重点return “Hello, wsd”app.add_url_rule(‘/hello’, view_func=hello) `&gt; 在这里有一个想问题，我们写Python代码时经常会写下面的代码： ```python `if __name__ == &#39;__main__&#39;: app.run(host=&#39;0.0.0.0&#39;, debug=app.config[&#39;DEBUG&#39;]()) # 启动web服务器 ` 这里为什么要写 if name == ‘main’呢？在一般的Python代码里，原因是确保if内的语句只在当前文件作为入口文件时执行，不会在其他模块导入时执行而在Flask项目中，除了上面的原因，还因为Python Web项目的生产环境一般为nginx + uwsgi, if下面的语句是启用了一个Flask自带的服务器，在生产环境下不会启动自带的服务器，如果没有if判断生产环境下就会执行下面的语句，就会启动flask默认的服务器]]></content>
      <tags>
        <tag>Flask</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[移动端访问我的博客]]></title>
    <url>%2F2018%2F03%2F30%2F%E7%A7%BB%E5%8A%A8%E7%AB%AF%E8%AE%BF%E9%97%AE%E6%88%91%E7%9A%84%E5%8D%9A%E5%AE%A2%2F</url>
    <content type="text"><![CDATA[]]></content>
      <categories>
        <category>移动端访问</category>
      </categories>
  </entry>
  <entry>
    <title><![CDATA[一些想法]]></title>
    <url>%2F2018%2F03%2F30%2F%E4%B8%80%E4%BA%9B%E6%83%B3%E6%B3%95%2F</url>
    <content type="text"><![CDATA[写一些自己的想法 由于上了研究生，接触了很多深入的知识，也不可能仅仅停留在使用上了，在这个博客里，我会更新我的学习收获，大致的目录如下： 安全查询方面的内容和代码。 Flask框架核心与Python的使用。 英语学习的收获和感悟。 线性代数等数学知识的深入。 机器学习能知识。希望能不断完善自己的知识。]]></content>
      <categories>
        <category>想法</category>
      </categories>
  </entry>
  <entry>
    <title><![CDATA[关于我]]></title>
    <url>%2Fabout%2Findex.html</url>
    <content type="text"><![CDATA[写一些自己的想法 现在在西安读研究生，希望能总结下自己的学习内容。 可以访问我的邮箱:wwg377655460@126.comQQ:377655460希望可以多多交流。]]></content>
  </entry>
  <entry>
    <title><![CDATA[categories]]></title>
    <url>%2Fcategories%2Findex.html</url>
    <content type="text"></content>
  </entry>
  <entry>
    <title><![CDATA[timeline]]></title>
    <url>%2Ftimeline%2Findex.html</url>
    <content type="text"></content>
  </entry>
</search>

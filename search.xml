<?xml version="1.0" encoding="utf-8"?>
<search> 
  
    
    <entry>
      <title>Flask学习与Python进阶-2-With语句详解</title>
      <link href="/2018/04/02/Flask%E5%AD%A6%E4%B9%A0%E4%B8%8EPython%E8%BF%9B%E9%98%B6-2-With%E8%AF%AD%E5%8F%A5%E8%AF%A6%E8%A7%A3/"/>
      <url>/2018/04/02/Flask%E5%AD%A6%E4%B9%A0%E4%B8%8EPython%E8%BF%9B%E9%98%B6-2-With%E8%AF%AD%E5%8F%A5%E8%AF%A6%E8%A7%A3/</url>
      <content type="html"><![CDATA[<h3 id="Python中With的用法"><a href="#Python中With的用法" class="headerlink" title="Python中With的用法"></a>Python中With的用法</h3><blockquote><p>在编写Python代码，需要链接数据库或打开文件时，我经常会使用<strong>with</strong><br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">with</span> open(…):</span><br><span class="line">    <span class="keyword">pass</span></span><br></pre></td></tr></table></figure></p></blockquote><blockquote><p>它会帮助我们安全的关闭链接，但我不知道它的工作原理，下面让我们来仔细分析一下。<br>我们先展示一段代码：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyResource</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__enter__</span><span class="params">(self)</span>:</span></span><br><span class="line">        print(<span class="string">'connect to resource'</span>)</span><br><span class="line">        <span class="keyword">return</span> self</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__exit__</span><span class="params">(self, exc_type, exc_val, exc_tb)</span>:</span> </span><br><span class="line">        <span class="keyword">if</span> exc_tb:</span><br><span class="line">            print(<span class="string">'process exception'</span>)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            print(<span class="string">'no exception'</span>)</span><br><span class="line">            print(<span class="string">'close resource connection'</span>)</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">True</span> </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">query</span><span class="params">(self)</span>:</span></span><br><span class="line">        print(<span class="string">'query data'</span>)</span><br><span class="line"><span class="keyword">with</span> MyResource() <span class="keyword">as</span> resource:</span><br><span class="line">resource.query()</span><br></pre></td></tr></table></figure></p></blockquote><blockquote><p>上面代码执行的结果如下：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">connect to resource</span><br><span class="line">query data</span><br><span class="line">no exception</span><br><span class="line">close resource connection</span><br></pre></td></tr></table></figure></p></blockquote><blockquote><p>由执行的结果我们知道<strong>with</strong>语句的执行顺序</p><ol><li>会首先调用类的<strong><strong>enter</strong></strong>方法，并将<strong> <strong>enter</strong></strong>返回的值赋给<strong> as</strong>后的对象</li><li>执行<strong>with</strong>语句中的代码</li><li>执行<strong> <strong>exit</strong></strong>中的代码，这里相当于<strong>finally</strong>的作用</li></ol></blockquote><blockquote><p>我们发现<strong> <strong>exit</strong></strong>函数有3个参数，我们来分析一下这几个参数的作用，我们修改部分代码如下：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">with</span> MyResource() <span class="keyword">as</span> resource:</span><br><span class="line">     <span class="number">1</span> / <span class="number">0</span></span><br><span class="line">     resource.query()</span><br></pre></td></tr></table></figure></p></blockquote><blockquote><p>执行得到下面的结果：<br><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">connect <span class="keyword">to</span> resource</span><br><span class="line">process exception</span><br><span class="line">close<span class="built_in"> resource </span>connection</span><br></pre></td></tr></table></figure></p></blockquote><blockquote><p>显然这三个参数保存的是异常信息，我们可以在<strong> <strong>exit</strong></strong>中处理<strong>with</strong>中的异常信息。<br><strong>值得注意的是 <strong>exit</strong>的返回值，返回False，会继续在with外部抛出异常，返回True，不会继续在with外部抛出异常，什么都不返回相当于返回False。</strong></p></blockquote>]]></content>
      
      
    </entry>
    
    <entry>
      <title>Flask学习与Python进阶\_1</title>
      <link href="/2018/03/30/Flask%E5%AD%A6%E4%B9%A0%E4%B8%8EPython%E8%BF%9B%E9%98%B6_1/"/>
      <url>/2018/03/30/Flask%E5%AD%A6%E4%B9%A0%E4%B8%8EPython%E8%BF%9B%E9%98%B6_1/</url>
      <content type="html"><![CDATA[<blockquote><p>Flask是基于Python的Web框架，我们主要通过学习Flask的基础知识来学习Python进阶知识。</p></blockquote><h2 id="使用pipenv"><a href="#使用pipenv" class="headerlink" title="使用pipenv"></a>使用pipenv</h2><blockquote><p> 使用pipenv创建虚拟环境<br><figure class="highlight autohotkey"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">` pip install pipenv</span><br></pre></td></tr></table></figure></p></blockquote><p>`</p><blockquote><p> 在自己的项目目录下创建虚拟环境，这个虚拟环境和项目是绑定的<br><figure class="highlight autohotkey"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">`pipenv install</span><br></pre></td></tr></table></figure></p></blockquote><p>`<strong>我执行上面的命令时报错了，好像是字符编码的问题，查询了一下，执行下面的2个命令就可以解决。</strong><br><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">`<span class="builtin-name">export</span> <span class="attribute">LANG</span>=en_US.UTF-8</span><br><span class="line"><span class="builtin-name">export</span> <span class="attribute">LC_ALL</span>=en_US.UTF-8</span><br></pre></td></tr></table></figure></p><p>`</p><blockquote><p> 创建完虚拟环境后，我们需要的是启动虚拟环境<br><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">` pipenv <span class="keyword">shell</span><span class="bash"></span></span><br></pre></td></tr></table></figure></p></blockquote><p>`</p><blockquote><p> 这里虚拟环境的主要作用是区分开项目的环境，每个项目版本、使用的包可能都不一样，区分开来更加方便。<br>安装flask<br><figure class="highlight autohotkey"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">`pipenv install flask</span><br></pre></td></tr></table></figure></p></blockquote><p>`&gt;  退出虚拟环境<br><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">`<span class="keyword">exit</span></span><br></pre></td></tr></table></figure></p><p>`&gt;  查看包的依赖关系<br><figure class="highlight autohotkey"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">` pipenv graph</span><br></pre></td></tr></table></figure></p><p>`&gt;  在虚拟环境下执行下面的命令，可以找到当前虚拟环境的目录<br><figure class="highlight ada"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">`pipenv <span class="comment">--venv</span></span><br></pre></td></tr></table></figure></p><p>`&gt; 创建一个简单的Flask项目，下面是最简单的Flask代码，就是下面简单的代码，我们就能运行起我们的Web服务。<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">` <span class="keyword">from</span> flask <span class="keyword">import</span> Flask</span><br><span class="line">app = Flask(__name__)  <span class="comment"># 实例化Flask对象</span></span><br><span class="line"><span class="meta">@app.route('/hello')  #  定义一个视图函数</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">hello</span><span class="params">()</span>:</span></span><br><span class="line"><span class="keyword">return</span> <span class="string">"Hello, wsd"</span></span><br><span class="line"> app.run()  <span class="comment"># 启动web服务器</span></span><br></pre></td></tr></table></figure></p><p>`</p><blockquote><p> 可以调试模式，修改代码就可以自动重启服务器，同时可以显示详细的异常信息<br><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">`app.<span class="builtin-name">run</span>(<span class="attribute">debug</span>=<span class="literal">True</span>)</span><br></pre></td></tr></table></figure></p></blockquote><p>`&gt;  在介绍另一种路由注册方式，比较而言第一种更加方便。<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">` <span class="function"><span class="keyword">def</span> <span class="title">hello</span><span class="params">()</span>:</span></span><br><span class="line"><span class="comment"># 基于类的视图（即插视图）=\&gt; 不是重点</span></span><br><span class="line"><span class="keyword">return</span> <span class="string">"Hello, wsd"</span></span><br><span class="line">app.add_url_rule(<span class="string">'/hello'</span>, view_func=hello)</span><br></pre></td></tr></table></figure></p><p>`&gt; 在这里有一个想问题，我们写Python代码时经常会写下面的代码：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">`<span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>: </span><br><span class="line">app.run(host=<span class="string">'0.0.0.0'</span>, debug=app.config[<span class="string">'DEBUG'</span>]())  <span class="comment"># 启动web服务器</span></span><br></pre></td></tr></table></figure></p><p>`</p><blockquote><p>这里为什么要写<strong> if <strong>name</strong> == ‘<strong>main</strong>’</strong>呢？<br>在一般的Python代码里，原因是确保if内的语句只在当前文件作为入口文件时执行，不会在其他模块导入时执行<br>而在Flask项目中，除了上面的原因，还因为Python Web项目的生产环境一般为nginx + uwsgi, if下面的语句是启用了一个Flask自带的服务器，在生产环境下不会启动自带的服务器，如果没有if判断生产环境下就会执行下面的语句，就会启动flask默认的服务器</p></blockquote>]]></content>
      
      
        <tags>
            
            <tag> Flask </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>移动端访问我的博客</title>
      <link href="/2018/03/30/%E7%A7%BB%E5%8A%A8%E7%AB%AF%E8%AE%BF%E9%97%AE%E6%88%91%E7%9A%84%E5%8D%9A%E5%AE%A2/"/>
      <url>/2018/03/30/%E7%A7%BB%E5%8A%A8%E7%AB%AF%E8%AE%BF%E9%97%AE%E6%88%91%E7%9A%84%E5%8D%9A%E5%AE%A2/</url>
      <content type="html"><![CDATA[<p><img src="/2018/03/30/移动端访问我的博客/url.png" alt="二维码"></p>]]></content>
      
      <categories>
          
          <category> 移动端访问 </category>
          
      </categories>
      
      
    </entry>
    
    <entry>
      <title>一些想法</title>
      <link href="/2018/03/30/%E4%B8%80%E4%BA%9B%E6%83%B3%E6%B3%95/"/>
      <url>/2018/03/30/%E4%B8%80%E4%BA%9B%E6%83%B3%E6%B3%95/</url>
      <content type="html"><![CDATA[<h3 id="写一些自己的想法"><a href="#写一些自己的想法" class="headerlink" title="写一些自己的想法"></a>写一些自己的想法</h3><blockquote><p>由于上了研究生，接触了很多深入的知识，也不可能仅仅停留在使用上了，在这个博客里，我会更新我的学习收获，大致的目录如下：</p><ol><li>安全查询方面的内容和代码。</li><li>Flask框架核心与Python的使用。</li><li>英语学习的收获和感悟。</li><li>线性代数等数学知识的深入。</li><li>机器学习能知识。<br>希望能不断完善自己的知识。</li></ol></blockquote>]]></content>
      
      <categories>
          
          <category> 想法 </category>
          
      </categories>
      
      
    </entry>
    
  
  
    
    <entry>
      <title>关于我</title>
      <link href="/about/index.html"/>
      <url>/about/index.html</url>
      <content type="html"><![CDATA[<h3 id="写一些自己的想法"><a href="#写一些自己的想法" class="headerlink" title="写一些自己的想法"></a>写一些自己的想法</h3><blockquote><p>现在在西安读研究生，希望能总结下自己的学习内容。</p></blockquote><p><strong><br>可以访问我的邮箱:<a href="mailto:wwg377655460@126.com" target="_blank" rel="noopener">wwg377655460@126.com</a><br>QQ:377655460<br>希望可以多多交流。</strong></p>]]></content>
    </entry>
    
    <entry>
      <title>timeline</title>
      <link href="/timeline/index.html"/>
      <url>/timeline/index.html</url>
      <content type="html"><![CDATA[]]></content>
    </entry>
    
    <entry>
      <title>categories</title>
      <link href="/categories/index.html"/>
      <url>/categories/index.html</url>
      <content type="html"><![CDATA[]]></content>
    </entry>
    
  
</search>
